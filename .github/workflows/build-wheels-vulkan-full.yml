name: Build Vulkan Wheels (don't run this one directly)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of llama-cpp-python to build: v0.2.14'
        default: 'v0.2.14'
        required: true
        type: string
      config:
        description: 'Override configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'Default'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version tag of llama-cpp-python to build: v0.2.14'
        default: 'v0.2.14'
        required: true
        type: string
      config:
        description: 'Configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'Default'
        required: false
        type: string

permissions:
  contents: write

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh
    env:
      CONFIGIN: ${{ inputs.config }}
      EXCLUDEIN: ${{ inputs.exclude }}
        
    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              # 'os' = 'ubuntu-20.04', 'windows-2019'
              'os' = @('ubuntu-20.04')
              'pyver' = "3.10", "3.11"
              'avx' = "AVX", "AVX2"
              'rename' = '0', '1'
              #'exclude' = @(
              #@{'os' = 'windows-2019'}
              #)
          }
          
          if ($env:CONFIGIN -ne 'Default') {$env:CONFIGIN.split(';').foreach({$matrix[$_.split(':')[0]] = $_.split(':')[1].split(',')})}
          
          if ($env:EXCLUDEIN -notin ('None','Default')) {
              $exclusions = $matrix['exclude']
              $exclusions += $env:EXCLUDEIN.split(';').replace(':','=').replace(',',"`n") | ConvertFrom-StringData
              $matrix['exclude'] = $exclusions
          } elseif ($env:EXCLUDEIN -eq 'None') {$matrix.remove('exclude')}
          
          $matrixOut = ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT
          
  build_wheels:
    name: Build ${{ matrix.os }} ${{ matrix.avx }} Vulkan ${{ matrix.vulkan }} ${{ matrix.rename == '1' && 'Textgen Wheel' || 'Wheel' }} ${{ matrix.pyver }}
    needs: define_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    defaults:
      run:
        shell: pwsh
    env:
      PCKGVER: ${{ inputs.version }}
      VULKAN_VERSION: '1.3.283'
      AVXVER: ${{ matrix.avx }}

    steps:
      - name: Free Disk Space
        if: runner.os == 'Linux'
        uses: jlumbroso/free-disk-space@v1.2.0
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: false
          
      - uses: actions/checkout@v4
        with:
          repository: 'abetlen/llama-cpp-python'
          ref: ${{ inputs.version }}
          submodules: 'recursive'

      - name: Install Linux Vulkan SDK
        if: runner.os == 'Linux'
        shell: bash
        run: |
          [ ! -d /etc/apt/keyrings ] && sudo mkdir --parents --mode=0755 /etc/apt/keyrings
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc > /dev/null
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-$VULKAN_VERSION-focal.list https://packages.lunarg.com/vulkan/$VULKAN_VERSION/lunarg-vulkan-$VULKAN_VERSION-focal.list
          sudo apt update
          sudo apt install vulkan-sdk -y
          
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}
          
      - name: Install Dependencies
        run: |
          python -m pip install build wheel cmake scikit-build ninja
          
      - name: Change Package Name
        if: matrix.rename == '1'
        run: |
          $packageVersion = [version]$env:PCKGVER.TrimStart('v')
          $pyproject = Get-Content 'pyproject.toml' -raw
          $cmakelists = Get-Content 'CMakeLists.txt' -raw
          if ($packageVersion -lt [version]'0.2.0') {
            $setup = Get-Content 'setup.py' -raw
            $regexstr = '(?s)name="llama_cpp_python",(.+)(package_dir={"llama_cpp": "llama_cpp", "llama_cpp.server": "llama_cpp/server"},.+?packages=\["llama_cpp", "llama_cpp.server"],)'
            if ($packageVersion -gt [version]'0.1.77') {$regexstr = '(?s)name="llama_cpp_python",(.+)(package_dir={"llama_cpp": "llama_cpp", "llama_cpp.server": "llama_cpp/server"},.+?package_data={"llama_cpp": \["py.typed"]},.+?packages=\["llama_cpp", "llama_cpp.server"],)'}
            $regexmatch = [Regex]::Matches($setup,$regexstr)
            if (!($regexmatch[0].Success)) {throw 'setup.py parsing failed'}
            $newstr = 'name="llama_cpp_python_cuda",' + $regexmatch[0].Groups[1].Value + $regexmatch[0].Groups[2].Value.Replace('llama_cpp','llama_cpp_cuda')
            $newsetup = $regexmatch[0].Result(('$`'+$newstr+'$'''))
            New-Item 'setup.py' -itemType File -value $newsetup -force
            $regexstr = '(?s)(?<=name = ")llama_cpp_python(".+?packages = \[{include = ")llama_cpp(".+)'
            $regexmatch = [Regex]::Matches($pyproject,$regexstr)
            if (!($regexmatch[0].Success)) {throw 'pyproject.toml parsing failed'}
            $newpyproject = $regexmatch[0].Result(('$`'+'llama_cpp_python_cuda'+'$1llama_cpp_cuda$2'))
          } else {
            $regexstr = '(?s)(?<=\[project]\s+?name = ")llama_cpp_python(".+?all = \[\s+?")llama_cpp_python(\[.+?wheel.packages = \[")llama_cpp("].+?input = ")llama_cpp(?=/__init__.py")'
            $regexmatch = [Regex]::Matches($pyproject,$regexstr)
            if (!($regexmatch[0].Success)) {throw 'pyproject.toml parsing failed'}
            $newpyproject = $regexmatch[0].Result(('$`' + 'llama_cpp_python_cuda' + '$1llama_cpp_cuda$2' + 'llama_cpp_cuda$3llama_cpp_cuda' + '$'''))
          }
          Copy-Item 'llama_cpp' 'llama_cpp_cuda' -recurse
          New-Item 'pyproject.toml' -itemType File -value $newpyproject -force
          New-Item 'CMakeLists.txt' -itemType File -value $cmakelists.Replace('llama_cpp','llama_cpp_cuda') -force
          
          if ($packageVersion -gt [version]'0.2.13')
          {
            $pyScripts = (Get-ChildItem $(Join-Path '.' 'llama_cpp_cuda' '*.py'))
            $pyScripts.fullname.foreach({
                $content = Get-Content $_ -raw
                $content = $content -replace '(?m)^import llama_cpp\.', 'from . import '
                $content = $content -replace '(?m)^from llama_cpp\.', 'from .'
                $content = $content -replace '(?m)^(\s*)import llama_cpp(\s*)$', '${1}import llama_cpp_cuda as llama_cpp${2}'
                $content | Set-Content $_ -NoNewline
            })
          }
        
      - name: Build Wheel
        run: |
          if ($IsLinux) {
            $env:CFLAGS = '-fPIC'
            $env:CXXFLAGS = '-fPIC'
          } else {
            $cmakelists = Get-Content 'CMakeLists.txt' -raw
            $regexstr = '(?s)(?<=\n)\s+?install\(\s+FILES \$\<TARGET_RUNTIME_DLLS.+/llama_cpp(?:_cuda)?\s+\)\s+?(?=endif\(\))'
            $regexmatch = [Regex]::Matches($cmakelists,$regexstr)
            if ($regexmatch[0].Success) {New-Item 'CMakeLists.txt' -itemType File -value $regexmatch[0].Result('$`$''') -force}
          }
          $env:VERBOSE = '1'
          $packageVersion = [version]$env:PCKGVER.TrimStart('v')
           
          if ($env:AVXVER -eq 'AVX') {$env:CMAKE_ARGS = "-GNinja -DGGML_VULKAN=on -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off"}
          if ($env:AVXVER -eq 'AVX512') {$env:CMAKE_ARGS = "-GNinja -DGGML_VULKAN=on -DGGML_AVX512=on"}
          if ($env:AVXVER -eq 'basic') {$env:CMAKE_ARGS = "-GNinja -DGGML_VULKAN=on -DGGML_AVX=off -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off"}
          if ($env:AVXVER -eq 'AVX2')
          {
              $env:CMAKE_ARGS = "-GNinja -DGGML_VULKAN=on"
              $buildtag = "+vulkan$env:VULKAN_VERSION"
          } else {$buildtag = "+vulkan$env:VULKAN_VERSION$env:AVXVER"}
          
          $env:CMAKE_ARGS = "-DLLAVA_BUILD=off $env:CMAKE_ARGS"

          if ($packageVersion -gt [version]'0.2.13') {$env:CMAKE_ARGS = "-DGGML_NATIVE=off $env:CMAKE_ARGS"}
          if ($packageVersion -lt [version]'0.2.0') {
            python -m build --wheel -C--build-option=egg_info "-C--build-option=--tag-build=$buildtag"
          } else {
            $initpath = Join-Path '.' '${{ matrix.rename == '1' && 'llama_cpp_cuda' || 'llama_cpp' }}' '__init__.py' -resolve
            $initcontent = Get-Content $initpath -raw
            $regexstr = '(?s)(?<=__version__ \= ")\d+(?:\.\d+)*(?=")'
            $regexmatch = [Regex]::Matches($initcontent,$regexstr)
            if (!($regexmatch[0].Success)) {throw '__init__.py parsing failed'}
            $newinit = $regexmatch[0].Result(('$`' + '$&' + $buildtag + '$'''))
            New-Item $initpath -itemType File -value $newinit -force
            python -m build --wheel
          }

      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.7.0
        continue-on-error: true
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./dist/*.whl
          tag: vulkan
          file_glob: true
          make_latest: false
          overwrite: true
        
      - uses: actions/upload-artifact@v4
        if: steps.upload-release.outcome == 'failure'
        with:
          name: 'vulkan-wheels'
          path: ./dist/*.whl
